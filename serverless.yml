service: bcl-backend
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  region: 'us-east-1'
  stage: ${opt:stage, 'dev'}
  environment:
    TABLE_CURSOS: CursosProf
    TABLE_HORARIOS: HorariosProfesor
    TABLE_RESERVAS: ReservasClaseTable
  apiGateway:
    description: "BCL Backend API Gateway"
    binaryMediaTypes:
      - 'multipart/form-data'
      - 'application/octet-stream'
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !GetAtt CursosProf.Arn
            - !GetAtt HorariosProfesor.Arn
            - !GetAtt ReservasClaseTable.Arn
            - !Sub "${CursosProf.Arn}/index/*"

plugins:
  - serverless-auto-swagger
  - serverless-offline
  - serverless-dynamodb-local

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
  autoswagger:
    title: 'BCL Backend API'
    apiType: 'http'
    generateSwaggerOnDeploy: true
    typefiles:
      - './src/types/api-types.d.ts'

functions:
  crearItem:
    handler: src/functions/create-item.handler
    events:
      - http:
          path: items
          method: post
          cors: true
          integration: lambda
          request:
            schemas:
              application/json: ${file(swagger/request-schemas.json):createItem}
  listarItems:
    handler: src/functions/get-item.handler
    events:
      - http:
          path: items
          method: get
          cors: true
          integration: lambda
  actualizarItem:
    handler: src/functions/update-item.handler
    events:
      - http:
          path: items/{id}
          method: put
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(swagger/request-schemas.json):updateItem}
  eliminarItem:
    handler: src/functions/delete-item.handler
    events:
      - http:
          path: items/{id}
          method: delete
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                id: true
          
resources:
  Resources:
    # DynamoDB Tables
    CursosProf:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CursosProf
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: tipo
            AttributeType: S
          - AttributeName: profesor
            AttributeType: S
          - AttributeName: curso
            AttributeType: S
        KeySchema:
          - AttributeName: tipo
            KeyType: HASH
          - AttributeName: profesor
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: CursoIndex
            KeySchema:
              - AttributeName: tipo
                KeyType: HASH
              - AttributeName: curso
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    HorariosProfesor:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: HorariosProfesor
        AttributeDefinitions:
          - AttributeName: tipo
            AttributeType: S
          - AttributeName: semana_profesor
            AttributeType: S
        KeySchema:
          - AttributeName: tipo
            KeyType: HASH
          - AttributeName: semana_profesor
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
  
    ReservasClaseTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ReservasClase
        AttributeDefinitions:
          - AttributeName: tipo
            AttributeType: S
          - AttributeName: fecha_reserva
            AttributeType: S
        KeySchema:
          - AttributeName: tipo
            KeyType: HASH
          - AttributeName: fecha_reserva
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

  Outputs:
    ApiGatewayRestApiId:
      Description: API Gateway REST API ID
      Value: !Ref ApiGatewayRestApi
      Export:
        Name: ${self:service}-${self:provider.stage}-api-id
    
    ServiceEndpoint:
      Description: API Gateway endpoint URL
      Value: 
        Fn::Join:
          - ""
          - - "https://"
            - !Ref ApiGatewayRestApi
            - ".execute-api."
            - !Ref AWS::Region
            - ".amazonaws.com/"
            - ${self:provider.stage}
      Export:
        Name: ${self:service}-${self:provider.stage}-api-url


